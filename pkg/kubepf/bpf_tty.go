// Code generated by go-bindata.
// sources:
// ../../dist/bpf_tty.o
// DO NOT EDIT!

package kubepf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bpf_ttyO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x95\x3f\x4c\x14\x41\x18\xc5\xdf\xdc\x1e\x77\x87\x50\xd0\x79\x2a\x85\x89\x0d\x16\x9e\x68\x45\x49\x30\x8a\x05\x05\xb1\xc2\x6a\x59\xce\x35\x5c\xe4\x5f\x76\x37\xc0\xa1\x09\x26\x46\x43\x41\x41\x63\x42\xac\x20\x5a\x68\x67\xb7\x74\x77\x25\xe5\x15\x16\x94\x94\x94\x76\x52\xed\x98\x9d\x79\xcb\xdd\xcd\xee\x8a\x56\x5a\x38\xc9\xee\x6f\xe7\xcd\xf7\xcd\x0c\x6f\x3e\xe6\xb6\x1f\xce\x3c\x2a\x08\x81\xa4\x09\xfc\x40\xb7\xd7\x6d\x8b\xa5\xee\xf7\x24\xdf\xc3\x10\x68\x4d\x6b\xad\x35\xa1\xf9\xf2\xfa\xeb\x28\xe6\x5b\x00\xb7\x00\x94\x01\x1c\x0d\x00\xad\x43\x3d\x5e\x16\xc0\x9e\x94\x32\x2c\x00\x95\x38\xcf\xd2\x7a\x1c\x5f\x04\xd0\xfc\xb8\x27\x55\x9c\x05\x8c\x94\xfa\xf3\xce\x98\x57\xed\x8b\x3f\x57\xf1\xbd\x71\xfb\x8c\x9b\xed\x89\x73\xbe\x1c\xab\xb8\x50\x24\xfb\xdc\x91\xdc\x2f\xb9\x49\xae\x91\x8b\xe4\x3c\x39\x47\xce\x92\x8f\xc9\x49\x72\x82\x1c\x27\xc7\xc8\x9b\x64\x95\x1c\x21\x2b\x24\xc8\xf3\x48\xf3\x3b\x79\x46\x9e\x92\x27\x64\x87\x3c\x26\xdb\xe4\x11\xf9\x95\xfc\x4c\x1e\x90\xfb\xe4\x1e\xb9\x13\x99\xbe\xed\x46\x52\x86\x25\x55\x04\x88\xfd\x8b\xd9\x7a\xd3\x7f\x3e\x77\xd6\xb5\x81\x61\x59\x8f\xd7\xb7\xf4\x3c\xf5\x0f\xbb\xfa\x1c\x3e\x71\xbe\x22\xb0\x13\x49\xd9\x3c\xd4\xf5\x50\x2d\xf4\xd7\x53\xc8\x73\x0f\x07\x80\x8a\xd0\xf3\x5f\x8b\xfb\x1c\x7f\x7f\x51\x8f\x7a\xdd\xb8\x56\xd4\xc7\xff\xa6\x5a\xb1\xe7\x29\xfc\xed\xcd\xfc\x43\x6d\x7a\x76\x06\x91\x94\x72\x84\x7d\xb1\xf5\x04\x95\x57\x43\xe2\x06\x80\x58\xab\x52\x9f\xbf\xc4\xb4\x6d\xf5\xb6\x32\xcd\xb5\x60\xa5\xb4\x39\x35\x7f\x39\xa5\x8f\x29\xbd\x92\xd2\x47\x95\x3e\x90\xd2\xef\x29\x3d\x3d\xff\xb0\xd2\x4b\xe9\xf9\xb9\x3f\xc1\xbb\x76\x94\xfa\x95\xa4\x2e\x6a\x81\xbb\x19\x60\xd9\x59\xf3\xef\x06\x41\xd3\xde\xf0\x1a\x81\xeb\xeb\xbe\x53\x0f\x1a\xeb\xae\xed\x37\x9e\xf9\xb0\xd7\x5d\xcf\x6f\xac\xae\xe0\xc5\x9a\xb7\xba\xe0\xda\xf6\x45\x30\x6a\x9e\xbb\xa4\xd5\xee\x0c\xb0\x97\x1a\x75\x77\xc5\xd7\xa3\x35\x77\xd1\x7e\xee\x39\xcb\x2e\x6a\x7e\xe0\x05\xce\x02\x6a\x7e\x73\x39\xe6\xcc\xd4\xd4\xb8\x7d\x3f\xdb\xe2\x3f\x6a\xab\xfa\x34\x52\xed\x94\x16\xbe\x33\x74\xf3\x37\x4c\xf0\x31\x1d\x9c\xcc\x59\xcf\xbc\x6a\xa6\x2f\xc9\x37\xeb\xc9\x3c\xf1\x07\x00\x06\x33\xd6\x69\x73\xff\x49\xbd\x0e\xf1\xef\x4c\xf2\x13\xfd\x2a\xd7\x37\x3d\x38\xe0\xba\x55\xf1\xeb\xfd\x97\x73\xf2\x8f\xac\xdf\xcb\x7f\x9a\x93\xdf\x29\x66\xc7\x9b\xfe\xdf\xce\xc9\xff\x96\x93\x6f\xf6\x5d\xe6\x9b\xff\x8e\x27\x0c\x1c\x33\x74\xd3\x7f\x27\xc7\xff\x4e\x86\xff\x83\x19\xfe\x6f\xe4\xdd\xb3\xcc\x6f\xb3\x2b\x8c\xf3\x4b\xee\x9b\x9f\x01\x00\x00\xff\xff\x2b\x58\x13\x2c\x68\x09\x00\x00")

func bpf_ttyOBytes() ([]byte, error) {
	return bindataRead(
		_bpf_ttyO,
		"bpf_tty.o",
	)
}

func bpf_ttyO() (*asset, error) {
	bytes, err := bpf_ttyOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bpf_tty.o", size: 2408, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bpf_tty.o": bpf_ttyO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bpf_tty.o": &bintree{bpf_ttyO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

