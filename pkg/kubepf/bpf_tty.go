// Code generated by go-bindata.
// sources:
// ../../dist/bpf_tty.o
// DO NOT EDIT!

package kubepf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bpf_ttyO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x55\xbf\x6f\xd3\x40\x18\x7d\x17\x27\x8d\x4b\x3b\x74\x02\x03\x1d\x2a\xb1\x94\xc5\xfc\xf8\x0b\xaa\x22\xe8\x92\xa1\x62\x2a\x93\xeb\x9a\x83\x5a\x34\x4d\x65\x5b\x2d\xa9\x90\x3a\x81\x3a\x74\xe8\x82\xd4\x15\x81\xc4\xca\xe6\x6e\x61\x23\x03\x03\x23\x7f\x02\xff\x01\x99\x72\xc8\x77\x9f\x63\xe7\x7c\x06\xba\xe7\x93\x62\xfb\x7b\xf7\xde\x7d\x77\xef\x7e\xe4\xe4\x71\xe7\x49\x83\x31\xe4\xc1\xf0\x1b\x45\x56\xc4\x76\xab\xf8\x5e\xa3\xe7\x22\x18\x06\xd7\x15\xf6\x16\xc0\x1d\x00\x6d\x00\x97\x2d\x60\xf0\x41\xe1\x6d\x06\x9c\x0b\x21\xd2\x06\x60\x03\x18\x58\x05\xbf\x09\xa0\xff\xf1\x5c\x48\x9e\x05\x2c\xcd\x4d\xeb\x7e\x91\xce\x99\xe2\x8f\x24\xbf\xcc\xbb\x20\xde\x66\x89\xe7\x7f\x1e\x4a\x5e\x3f\xd8\x85\xce\x3f\x1b\x0b\x91\xda\x72\xb2\xc8\x74\xd9\x7b\xa2\xf3\xb7\x25\xef\x25\x03\x56\x00\x7c\xa3\x77\xd7\x51\xae\xa4\x4c\xf1\x83\x5b\xa7\xe3\x2c\x0f\x8e\xcf\xd4\x78\x3e\x51\xff\x4d\xe0\x74\x2c\xc4\xc0\x57\xb9\xd3\x98\xf6\x31\xa5\xf9\xa7\x2d\xc0\xa6\xba\x37\xb3\x9c\xda\xdf\x4f\xd6\x41\x8d\x27\x1b\xa6\xfc\x98\x85\x8c\x66\xe9\x37\xf3\xa5\x88\x8d\xcd\x0e\xc6\x42\x88\x25\xca\xd9\xf1\x53\xd8\x6f\x16\xd8\x6d\x00\x19\xe6\x10\xbe\x65\x3a\xdc\xa5\x38\x91\x4f\x0b\x23\x43\x9b\x05\xab\x82\x6d\xc9\xfe\xdb\x15\x7c\x55\xe2\x76\x05\x5f\x96\x78\xab\x82\x3f\x90\x78\xb5\xff\x45\x89\xcf\x55\xf0\x15\x9a\x07\xa3\x3b\x67\x99\xf0\x6b\x00\xe4\x91\x73\x13\xfe\x3a\x41\xd7\x3f\x88\xef\x25\x49\xdf\x3b\x8a\xc2\x84\xc7\x2a\xf7\x83\x24\x3c\xe4\x5e\x1c\x3e\x8f\xe1\x1d\xf2\x28\x0e\x7b\xfb\x78\x75\x10\xf5\x76\xb8\xe7\x4d\xc8\x70\x23\xbe\xa7\xd0\xa2\x07\x78\x7b\x61\xc0\xf7\x63\xd5\xea\xf2\x5d\xef\x45\xe4\x77\x39\xdc\x38\x89\x12\x7f\x07\x6e\xdc\xef\x66\xef\xce\xfa\xfa\x7d\xef\xa1\xd1\xe1\xab\x45\x4f\xfa\x5e\x8d\x9f\xb4\xf7\xdf\x69\xb8\xbe\xbc\x74\x5d\x55\x1c\x5c\xab\xa9\xa7\x1f\xa9\x8d\x7f\xe8\xf5\xfd\xa4\xaf\xf8\x23\x00\xf3\x86\x3a\x97\x54\x28\xdf\xaf\x0b\x34\xcf\x5c\x9f\xe3\x37\xa8\xbe\xee\xc1\x05\xd5\x75\xd8\xdf\xc7\xdf\xae\xd1\x7f\x69\xfc\x9f\xfe\x59\x8d\x7e\x68\x99\xf9\xba\xff\x77\x6b\xf4\xdf\x6b\xf4\x7a\xce\x49\xaf\xfd\x8d\xe0\x07\xe9\x57\x35\x5c\xf7\xdf\xaf\xf1\x7f\x68\xf0\x7f\xde\xe0\xff\x91\xa1\x76\x16\x23\xaa\xff\x95\x72\xa6\xad\x5f\x7e\xdf\xfc\x09\x00\x00\xff\xff\x90\xdc\x02\x18\x60\x08\x00\x00")

func bpf_ttyOBytes() ([]byte, error) {
	return bindataRead(
		_bpf_ttyO,
		"bpf_tty.o",
	)
}

func bpf_ttyO() (*asset, error) {
	bytes, err := bpf_ttyOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bpf_tty.o", size: 2144, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bpf_tty.o": bpf_ttyO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bpf_tty.o": &bintree{bpf_ttyO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

