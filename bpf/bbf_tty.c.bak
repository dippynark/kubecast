//#include <uapi/linux/ptrace.h>
//#include <linux/sched.h>
//#include <linux/fs.h>
//#include <linux/nsproxy.h>
//#include <linux/ns_common.h>

#include <uapi/linux/bpf.h>
#include "bpf_helpers.h"

/*
// define data structures
struct sid_t {
    int sid;
};

#define BUFSIZE 256
struct tty_write_t {
    int count;
    char buf[BUFSIZE];
    unsigned int sessionid;
};

// define maps
struct bpf_map_def __section_maps tty_writes = {
	.type = BPF_MAP_TYPE_HASH,
	.key_size = sizeof(sid_t),
	.value_size = sizeof(u64),
	.max_entries = 1,
};


BPF_HASH(active_sids, struct sid_t, u64);
BPF_PERF_OUTPUT(tty_writes);

// save_sid saves a sessionid generated from a call
// to setsid to the active_sids map
int save_sid(struct pt_regs *ctx) {

    struct sid_t sid_struct = {};
    pid_t sid = PT_REGS_RC(ctx);
    u64 time_ns = bpf_ktime_get_ns();

    sid_struct.sid = sid;

    active_sids.update(&sid_struct, &time_ns);

    return 0;

}

int kprobe__tty_write(struct pt_regs *ctx, struct file *file,
    const char __user *buf, size_t count)
{
    struct task_struct *task;
    struct pid_link pid_link;
    struct pid pid;
    int sessionid;

    // get current sessionid
    task = (struct task_struct *)bpf_get_current_task();
    bpf_probe_read(&pid_link, sizeof(pid_link), (void *)&task->group_leader->pids[PIDTYPE_SID]);
    bpf_probe_read(&pid, sizeof(pid), (void *)pid_link.pid);
        sessionid = pid.numbers[0].nr;

    // build session struct key
    struct sid_t sid_key;
        sid_key.sid = sessionid;

    // if sid does not exist in our map then return
    //u64 *time_ns = active_sids.lookup(&sid_key);
    //if (!time_ns) {
    //    return 0;
    //}

    // bpf_probe_read() can only use a fixed size, so truncate to count
    // in user space:
    struct tty_write_t tty_write = {};
    bpf_probe_read(&tty_write.buf, BUFSIZE, (void *)buf);
    if (count > BUFSIZE) {
        tty_write.count = BUFSIZE;
    } else {
        tty_write.count = count;
    }

    // add sessionid to tty_write structure and submit
    tty_write.sessionid = sessionid;
    tty_writes.perf_submit(ctx, &tty_write, sizeof(tty_write));

    return 0;
}
*/