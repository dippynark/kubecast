// Code generated by go-bindata.
// sources:
// ../../dist/bpf_tty.o
// DO NOT EDIT!

package kubepf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bpf_ttyO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x55\xbf\x6f\xd3\x40\x14\xfe\xce\x3f\xda\xd0\x16\x29\x03\x94\x40\x19\x22\xb1\x96\x00\x02\xa4\x8e\x51\x25\xe8\x40\x86\x08\x31\x30\x80\x5c\x37\x18\x6a\x68\xda\xc8\xb6\x0a\x2e\x95\x60\x80\x8d\x0d\x21\x21\x26\xa0\x48\xac\x19\x2a\xa5\x5b\xb2\xf1\x6f\xf4\x4f\xc8\x46\xa7\x1c\xba\xbb\xe7\x38\x39\xdb\x08\xb1\xc2\x93\xe2\x97\xf7\xdd\x7b\xef\xbb\xfb\x7c\x77\x7e\x75\xab\x71\xdb\x60\x0c\x89\x31\xfc\x44\x1a\xa5\xf6\x7a\x26\xfd\x5f\xa7\xe7\x69\x30\xc4\x8b\x4d\x19\xbd\x05\x60\x03\x78\x39\x37\xe4\x22\x6e\x3d\x3d\x91\xbe\xff\x55\xd5\xcc\x1a\xc0\x09\xe7\xbc\x7f\x40\xb1\x09\x0c\x39\xe7\x15\x8d\xac\x67\x61\xdc\xcf\x10\x31\xe1\x1f\xc8\xf7\x17\xd3\xf1\x4b\x00\x62\xf3\xc8\x96\xf8\x17\xea\xcb\x14\x4f\xcf\x00\x4a\x94\x27\x5a\xc6\x07\x6a\x3e\x82\xb7\x3c\x33\x9d\x7f\x4c\xf9\x95\xa9\xfc\xe1\x38\xff\xaa\xd6\x7f\x40\xf9\xd5\x89\x7c\xf7\xfb\x40\xe6\x9f\x9d\x3d\x27\xf3\xe2\xd6\x26\xf4\x79\x1d\x8e\x38\xef\x95\xa4\xc8\x10\xf5\xc2\x8f\xeb\xdd\x75\x99\xf7\x84\xa9\xbe\x3f\xc8\xb7\x49\xa0\x1e\x53\xf9\xad\x0b\xdd\x91\xd4\x77\xef\x90\x4f\xeb\x7e\xa4\xf4\xfe\x46\x7c\x16\xd0\x1d\x71\xde\x77\x55\x5c\x31\x34\x9d\x4d\xf2\x36\x50\xa6\x79\x9c\xcf\xd1\x9b\xd1\xfc\xc4\xb4\x61\xe5\x6c\x8c\x7f\xd4\xac\x89\xdf\x7f\x5d\x52\x5b\x6b\x36\x30\xe2\x9c\x97\x29\x66\x7b\x77\x51\xda\x9f\x67\x4b\x00\x04\x56\x21\xbc\x43\xfe\x0c\x80\xe5\x04\xcb\xbb\x78\x34\x7b\x2f\x9f\x16\xf4\x4b\xea\x1d\xe1\xeb\x39\x3d\x4c\x18\xb9\xbd\xcc\x9c\x17\xf7\x40\xce\xb3\x94\xc1\x97\x25\x7e\x2a\x83\x57\x25\x3e\x93\xc1\x6f\x4a\x3c\xdb\x3f\x94\x78\x76\x3e\x65\xf9\x9b\xcd\xe0\x75\xf2\x62\x59\x62\x74\x85\xa5\xf1\x1c\x80\x8b\x34\x3e\x27\xd7\xa3\xee\xaa\x24\x96\xec\xb5\xc0\xdb\xaa\x45\xde\x8b\x08\x6d\xb7\x13\x5e\x89\xa2\xd8\x79\x1e\xf8\x91\x17\xaa\xd8\x6d\x45\xfe\xae\xe7\x84\xfe\xa3\x10\xce\xae\x17\x84\xfe\xce\x36\x9e\x75\x82\x9d\x0d\xcf\x71\xc6\xc9\xb2\x8b\x42\xd3\x0e\x70\xb6\xfc\x96\xb7\x1d\xaa\xd1\x9a\xb7\xe9\x3c\x0e\xdc\xb6\x87\xd0\x55\x0d\x51\x0b\xa3\x20\x72\x37\x50\x0b\xe3\xb6\xf0\x8d\xd5\xd5\x6b\xce\x0d\xe5\xae\x67\x56\xfa\x77\xb6\x4f\xeb\xd6\xed\xd8\x56\xfe\x93\x86\xeb\xdb\xc3\x26\x4c\x7f\x83\x89\xee\x1d\x0d\xd7\x77\x86\xa8\xcd\xee\x0a\xe0\x33\xf1\x27\xe7\x60\x81\xbe\x67\x49\x7d\x82\xdf\x29\xe0\xef\x26\xfc\xec\xf7\xfc\x6b\x05\xfc\xdd\x1c\x7e\x2b\x87\x7f\x89\xf8\x75\x0d\xab\xb4\x45\xf5\xef\xb3\xbe\xa3\xe7\x0b\xea\x57\xcc\x3f\xab\x7f\x58\x50\xdf\xb4\xf2\xf3\xf5\xf7\x77\xb9\xa0\xfe\x5e\x41\xbd\x1e\xfb\x54\xaf\x9f\xc8\xfb\x94\x58\xd7\x70\x5d\x7f\xaf\x40\xff\x01\xe9\x5f\xa5\x78\x81\xce\xa4\xae\xff\x9b\x1c\x6e\x61\x1f\x89\xbf\x34\x71\xde\xed\x89\xfa\xe4\x1e\xfd\x15\x00\x00\xff\xff\x7b\xe5\x80\x3e\xc0\x09\x00\x00")

func bpf_ttyOBytes() ([]byte, error) {
	return bindataRead(
		_bpf_ttyO,
		"bpf_tty.o",
	)
}

func bpf_ttyO() (*asset, error) {
	bytes, err := bpf_ttyOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bpf_tty.o", size: 2496, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bpf_tty.o": bpf_ttyO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bpf_tty.o": &bintree{bpf_ttyO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

