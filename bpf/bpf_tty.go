// Code generated by go-bindata.
// sources:
// ../../dist/bpf_tty.o
// DO NOT EDIT!

package kubepf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bpf_ttyO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x55\xbf\x6f\xd3\x40\x14\xfe\xce\xb1\x93\x90\x16\x29\x03\x94\x40\x19\x22\xb1\x96\x00\x02\xa4\x8e\x51\x25\xe8\x40\x86\x08\x31\x30\x80\x5c\x37\x18\x6a\x68\xda\xc8\xb6\x0a\x29\x95\xc8\x10\x24\x06\x86\x4a\x08\xa9\x62\x02\x8a\xc4\xda\x2d\x6c\x66\x83\x3f\x83\x91\xb1\x1b\x9d\x72\xe8\xce\xcf\xb1\x73\xb6\x11\x62\xa5\x4f\x8a\x5f\xde\xe7\xf7\xbd\x77\xf7\xdd\x0f\xbf\xb8\xd1\xba\xa9\x31\x86\xc8\x18\x7e\x21\x8e\x62\x1b\x14\xe3\xff\x4d\x7a\x9e\x04\x43\x7f\xae\x2d\xa3\x97\x00\x0c\x00\xcf\x2b\x87\x5c\xc4\x9d\xc7\x47\xd2\x07\x1f\x43\x4e\x49\x03\x8e\x38\xe7\xc1\x3e\xc5\x05\xe0\x90\x73\x5e\x53\x9a\x8d\x74\x4c\xea\x69\x22\x26\xfc\x2d\xf9\x60\x2e\x7e\x7f\x41\xd4\x01\xf0\xc5\x00\x82\x0f\x54\x97\x01\xbb\x9c\xf3\x91\x06\x94\x45\x7e\x21\xce\x17\xa5\xfb\xfb\xbb\x3c\xea\x5f\x2d\x4e\xf3\x7e\x12\xaf\x36\x95\x4f\xf3\x48\xe4\xed\x51\x5e\x3b\x91\x67\x7d\xfe\x2e\xf3\x4e\x97\xce\xc8\xbc\x7e\x67\x0d\x2a\x6f\x38\xe6\x7c\x54\x96\x22\x43\xf0\x85\x9f\xf0\xad\x15\x99\xf7\x88\x01\x75\x00\xdf\xc8\x77\x49\xa0\x11\x0b\xf3\x3b\xe7\x06\x63\xa9\xef\xf6\x90\x4f\xeb\xfe\x2a\x1c\xe7\x27\xea\xa7\x03\x83\x31\xe7\x81\x15\xc6\x35\x4d\xd1\x99\x74\x19\x19\x40\x95\xc6\x71\x36\x43\x6f\x46\xe3\x13\xc3\x86\x9e\xb1\x31\xfe\x53\xd3\x13\xbf\x63\x5d\x62\x5b\x6e\xb7\x30\xe6\x9c\x57\x29\x66\xdb\xb7\x51\xde\x99\x61\xf3\x00\x04\x56\x23\xbc\x47\xfe\x14\x80\x85\x08\xcb\xba\x78\x14\x7b\x23\x9f\x3a\xd4\x4b\xea\x35\xe1\x2b\x19\x35\x0a\xd0\x32\x6b\x15\x32\x16\xee\x9e\x1c\x67\x39\x85\x2f\x48\xfc\x44\x0a\xaf\x4b\xbc\x98\xc2\xaf\x4b\x3c\x5d\xdf\x93\x78\x7a\x3c\x55\xf9\x2b\xa5\xf0\x26\x79\x46\x77\xdd\x22\x8b\xe3\x0a\x80\xf3\xf4\xbe\x22\xe7\x03\x5c\x4e\xc4\xb2\x7b\xc3\xb5\xd7\x1b\xbe\xfd\xcc\x47\xd7\xea\x79\x97\x7c\xbf\x6f\x3e\x75\x1d\xdf\xf6\xc2\xd8\xea\xf8\xce\x96\x6d\x7a\xce\x03\x0f\xe6\x96\xed\x7a\xce\xe6\x06\x9e\xf4\xdc\xcd\x55\xdb\x34\x27\xc9\xb2\x4a\x88\xc6\x15\x60\xae\x3b\x1d\x7b\xc3\x0b\xdf\x36\xec\x35\xf3\xa1\x6b\x75\x6d\x78\x56\x58\x10\x0d\xcf\x77\x7d\x6b\x15\x0d\xaf\xdf\x15\xbe\xb5\xb4\x74\xc5\xbc\x16\xba\xab\xa9\x99\xfe\x9b\xed\xd0\xbc\x55\xfb\x61\x84\xfe\x9d\x82\xab\xdb\xc3\x20\x4c\x5d\xc1\x48\xf7\x9e\x82\xab\x3b\x43\x70\xd3\xbb\x02\x78\x4f\xfd\xa3\x73\x30\x4b\xdf\xb3\x88\x1f\xe1\xb7\x72\xfa\x1f\x44\xfd\xd9\x9f\xfb\x2f\xe7\xf4\x3f\xc8\xe8\xaf\x67\xf4\x9f\xa7\xfe\xaa\x86\x75\xda\xa2\xea\xf7\x59\xdd\xd1\x33\x39\xfc\xc5\xc2\xdf\xf1\xef\xe7\xf0\xdb\x7a\x76\xbe\xba\x7e\x17\x73\xf8\x77\x72\xf8\x6a\xec\x10\x5f\x3d\x91\x77\x29\xb1\xa9\xe0\xaa\xfe\x76\x8e\xfe\x5f\x49\xff\x3a\xc5\xb3\x74\x26\x55\xfd\x87\x19\xbd\x85\xed\x51\xff\x72\xe2\xbc\x1b\x09\x7e\x74\x8f\xfe\x0e\x00\x00\xff\xff\x90\x1e\x72\x5d\xc0\x09\x00\x00")

func bpf_ttyOBytes() ([]byte, error) {
	return bindataRead(
		_bpf_ttyO,
		"bpf_tty.o",
	)
}

func bpf_ttyO() (*asset, error) {
	bytes, err := bpf_ttyOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bpf_tty.o", size: 2496, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bpf_tty.o": bpf_ttyO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bpf_tty.o": &bintree{bpf_ttyO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

