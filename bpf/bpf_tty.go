// Code generated by go-bindata.
// sources:
// ../../dist/bpf_tty.o
// DO NOT EDIT!

package kubepf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bpf_ttyO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x55\xb1\x6f\xd3\x4e\x14\xfe\xce\x71\xda\xfc\xd2\x1f\x52\x06\x28\x81\x32\x44\x62\x2d\x01\x04\x48\x1d\xa3\x4a\xd0\x81\x0c\x11\x62\x60\x00\xb9\x6e\x30\xd4\xd0\xb4\x91\x6d\x15\x52\x2a\xd1\x21\x95\x3a\x30\x44\x42\x48\x15\x13\x50\x24\xd6\x6e\x19\x33\xc2\xc8\x9f\xc1\x98\x8d\x4e\x39\x74\x77\xcf\xb1\x39\x9f\x11\x62\x85\x27\xc5\x2f\xef\xf3\x7b\xef\x7b\xf7\xee\xdd\xf9\xe5\xcd\xe6\x2d\x8b\x31\xc4\xc2\xf0\x1d\x89\x95\xc8\x60\x26\xf9\xdf\xa0\xe7\x29\x30\xf4\xe6\x5b\xd2\xda\x07\x50\x04\xf0\xa2\x3c\xe6\xc2\x6e\x3f\x39\x91\x7a\xf4\x41\xc5\xcc\x5a\xc0\x09\xe7\x7c\x74\x44\x76\x01\x18\x73\xce\xab\x1a\xd9\xd0\xc6\x34\x9f\x25\x6c\xc2\xdf\x90\x1e\xcd\x27\xef\x2f\x8a\x3c\x00\x2a\x33\xc0\xe8\x3d\xe5\x65\xc0\x37\xce\xf9\xd0\x02\xaa\xc2\xbf\x90\xf8\x8b\xd4\xbd\x23\xaa\x2b\xe5\x7f\x48\xfe\xad\x94\x9f\xfb\xe9\x8b\x5a\xc7\xce\x20\xb3\x8e\x81\xa1\xee\x7d\xd9\x3b\xe0\x0c\xce\x4a\xbb\xd7\x5e\x87\xce\xd3\x9f\x70\x3e\x2c\x29\x47\xc1\x27\xf4\x94\xcf\x5d\x95\x7e\x8f\x19\x50\x03\xf0\x99\x74\x87\x88\x86\x4c\xf9\xb7\xcf\xef\x4d\x54\x5d\x7d\xfe\x73\xdf\x0f\x54\x9d\x1f\x89\xcf\x06\xf6\x26\x9c\x8f\x5c\x65\x57\x2d\xad\xcf\xd4\x97\x61\x11\xa8\x50\x1d\xe7\x0c\xfd\x66\x54\x9f\x28\x1b\x76\x76\x2e\xfe\x56\xb1\x53\xbf\x7f\x7d\x49\x64\xa5\xd5\xc4\x84\x73\x5e\x21\x9b\xed\xdc\x41\x69\x77\x8e\x2d\x88\x73\x0a\x75\x26\x85\x74\x49\x9f\x06\xb0\x18\x63\xa6\x8b\x47\x93\xd7\xf2\x69\x43\xbf\xa4\x5e\x11\xbe\x6a\xc8\x51\x80\x65\xcc\x55\x30\x6c\xdc\x7d\x59\x67\x29\x83\x2f\x4a\xfc\xbf\x0c\x5e\x93\xf8\x4c\x06\xbf\x21\xf1\x6c\xfe\x50\xe2\xd9\x7a\x2a\xf2\x37\x9b\xc1\x1b\xa4\x19\xdd\x75\x07\x9a\xbd\xc4\x12\xbb\x0c\xe0\x02\xbd\x2f\xcb\xf5\x01\x57\x52\xb6\xac\xa6\x1e\x78\x1b\xf5\xc8\x7b\x1e\xa1\xe3\x76\xc3\xcb\x51\xd4\x73\x9e\x05\x7e\xe4\x85\xca\x76\xdb\x91\xbf\xed\x39\xa1\xff\x30\x84\xb3\xed\x05\xa1\xbf\xb5\x89\xa7\xdd\x60\x6b\xcd\x73\x9c\xa9\xb3\xcc\xa2\xd0\x24\x03\x9c\x0d\xbf\xed\x6d\x86\xea\x6d\xdd\x5b\x77\x1e\x05\x6e\xc7\x43\xe8\xaa\x84\xa8\x87\x51\x10\xb9\x6b\xa8\x87\xbd\x8e\xd0\xcd\xe5\xe5\xab\xce\x75\xa5\xae\x65\x56\xfe\x67\xb2\x4b\xeb\xd6\x65\x5c\x54\xfa\xad\x86\xeb\xe3\x52\x24\x4c\xdf\xd1\x78\x1f\xba\x1a\xae\x4f\x8a\x88\xcd\x4e\x09\xf0\x8e\xf8\xe3\x73\xf1\x3f\x7d\xdf\xe2\xf8\x18\xbf\x9d\xc3\x7f\x1c\xf3\xb3\x5f\xf3\xaf\xe4\xf0\x1f\x13\x7f\x2d\xc5\x6f\x1b\xf8\x17\x88\x5f\xef\x61\x8d\x46\x56\xff\xee\xe9\x13\x3e\x97\x13\xbf\x54\xf8\xbd\xf8\x07\x39\xf1\x2d\xdb\xec\xaf\xef\xdf\xa5\x9c\xf8\xbb\x39\xf1\xba\xed\x53\xbc\x7e\x42\xef\x91\x63\x43\xc3\xf5\xfe\x7b\x39\xfd\xff\x6a\xe8\x7f\xd9\xd0\xff\xbe\x81\x5b\xc8\x21\xf1\x97\x52\xe7\xbd\x98\x8a\x8f\xef\xd5\x1f\x01\x00\x00\xff\xff\x55\x96\x32\x3b\xd0\x09\x00\x00")

func bpf_ttyOBytes() ([]byte, error) {
	return bindataRead(
		_bpf_ttyO,
		"bpf_tty.o",
	)
}

func bpf_ttyO() (*asset, error) {
	bytes, err := bpf_ttyOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bpf_tty.o", size: 2512, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bpf_tty.o": bpf_ttyO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bpf_tty.o": &bintree{bpf_ttyO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

